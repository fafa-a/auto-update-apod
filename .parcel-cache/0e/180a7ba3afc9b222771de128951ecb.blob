{"mappings":"wNAGAA,EAAOC,OAAM,CAAGC,KAAI,oDCApBF,EAAOC,OAAM,CAAGC,KAAI,oDAEpBC,EAAWF,OAAM,CACfG,WAAU,OACVC,QAAO,kBACPC,WAAU,sCAGNC,EAAgBC,MAAUC,SACXN,EAAWO,GAAGC,SAASC,OACxCH,EAAM,CAEJI,OAAM,kBAEEC,EAAOC,OACXD,SAGAE,QAAMC,IAAG,8BACJF,EAHPC,QAAQC,IAAG,IAAIH,MChBvBd,EAAOC,OAAM,CAAGC,KAAI,0DAIdgB,EAAWC,EAFA,2CACA,uJCAjBnB,EAAOC,SASaO,+BAGdY,EAASC,KACTA,EAAIC,YACJA,EAAWC,MACXA,EAAKC,WACLA,EAAUC,IACVA,EAAGC,gBACHA,EAAeC,MACfA,QHpBSnB,iBACPoB,EAAMC,EAAMC,IAAG,yFAEnBC,MAAIX,UACFA,EAASC,KACTA,EAAIC,YACJA,EAAWC,MACXA,EAAKC,WACLA,EAAUE,gBACVA,EAAeC,MACfA,EAAKF,IACLA,UAEMG,mBAGRR,OACAC,cACAC,QACAC,aACAC,MACAC,kBACAC,QACAC,IGFUK,GACJC,EAAI,CAAIR,EAAKF,GAEbW,EAAiB1B,MAAU2B,QAC3BC,EAAG,iBAEMC,KAAOF,EAAI,OACdJ,QAAaxB,EAAiB8B,eAC5BC,GAAeP,EACvBK,EAAIG,KAAKD,UAEJxB,GACPsB,EAAIG,KAAKJ,EAAK,WAETC,GAGHA,QAAYF,EAAkBD,IAC7BO,EAAKC,GAASL,ODnCL5B,QAAAmB,MAClBA,EAAKL,YACLA,EAAWE,WACXA,EAAUgB,IACVA,EAAGC,MACHA,EAAKf,gBACLA,EAAeL,KACfA,EAAID,UACJA,iBAEQW,EAAIjB,MAAEA,SAAgBI,EAASwB,KAAI,QAASC,OAAM,EAEtDhB,MAAOA,EACPL,YAAaA,EACbD,KAAMA,EACNG,WAAYA,EACZoB,MAAK,CACHnB,IAAKe,EACLjB,MAAOkB,GAETrB,UAAWA,EACXM,gBAAiBA,KAGjBZ,EACFE,QAAQF,MAAMA,GAGhBE,QAAQC,IAAG,4BCSH4B,CAAc,CAClBlB,MAAOA,EACPL,YAAaA,EACbE,WAAYA,MACZgB,QACAC,EACAf,gBAAiBA,EACjBL,KAAMA,EACND,UAAWA,IAEbJ,QAAQC,IAAG,2BACAH,GACXE,QAAQF,MAAK,KAAKA,EAAEgC,WAGxBC","sources":["services/useNasa.js","services/useCloudinary.js","services/useSupabase.js","index.js"],"sourcesContent":["import dotenv from \"dotenv\"\r\nimport axios from \"axios\"\r\n\r\ndotenv.config({ path: \"D:/WorkSpace/Side project/auto-update-apod/.env\" })\r\n\r\nconst fetchNasa = async () => {\r\n  const res = axios.get(process.env.NASA_URL)\r\n  const {\r\n    data: {\r\n      copyright,\r\n      date,\r\n      explanation,\r\n      hdurl,\r\n      media_type,\r\n      service_version,\r\n      title,\r\n      url,\r\n    },\r\n  } = await res\r\n\r\n  return {\r\n    copyright,\r\n    date,\r\n    explanation,\r\n    hdurl,\r\n    media_type,\r\n    url,\r\n    service_version,\r\n    title,\r\n  }\r\n}\r\n\r\nexport { fetchNasa }\r\n","import dotenv from \"dotenv\"\r\nimport cloudinary from \"cloudinary\"\r\n\r\ndotenv.config({ path: \"D:/WorkSpace/Side project/auto-update-apod/.env\" })\r\n\r\ncloudinary.config({\r\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\r\n  api_key: process.env.CLOUDINARY_API_KEY,\r\n  api_secret: process.env.CLOUDINARY_API_SECRET,\r\n})\r\n\r\nconst uploadCloudinary = async (oldUrl) => {\r\n  const data = await cloudinary.v2.uploader.upload(\r\n    oldUrl,\r\n    {\r\n      format: \"webp\",\r\n    },\r\n    function (error, result) {\r\n      if (error) {\r\n        console.log(\"❌\", error)\r\n      } else {\r\n        console.log(\"✔️ \" + \" Cloudinary upload done\")\r\n        return result\r\n      }\r\n    }\r\n  )\r\n  return data\r\n}\r\nexport { uploadCloudinary }\r\n","import { createClient } from \"@supabase/supabase-js\"\r\nimport dotenv from \"dotenv\"\r\n\r\ndotenv.config({ path: \"D:/WorkSpace/Side project/auto-update-apod/.env\" })\r\n\r\nconst supabaseUrl = \"https://pkonpcjzjjefublfunli.supabase.co\"\r\nconst supabaseKey = process.env.SUPABASE_KEY\r\nconst supabase = createClient(supabaseUrl, supabaseKey)\r\n\r\nconst insertDatabase = async ({\r\n  title,\r\n  explanation,\r\n  media_type,\r\n  Url,\r\n  hdUrl,\r\n  service_version,\r\n  date,\r\n  copyright,\r\n}) => {\r\n  const { data, error } = await supabase.from(\"apod\").insert([\r\n    {\r\n      title: title,\r\n      explanation: explanation,\r\n      date: date,\r\n      media_type: media_type,\r\n      media: {\r\n        url: Url,\r\n        hdurl: hdUrl,\r\n      },\r\n      copyright: copyright,\r\n      service_version: service_version,\r\n    },\r\n  ])\r\n  if (error) {\r\n    console.error(error)\r\n    return\r\n  }\r\n  console.log(\"✔️ Supabase upload done\")\r\n}\r\n\r\nexport { insertDatabase }\r\n","import dotenv from \"dotenv\"\r\nimport { fetchNasa } from \"./services/useNasa.js\"\r\nimport { uploadCloudinary } from \"./services/useCloudinary.js\"\r\nimport { insertDatabase } from \"./services/useSupabase.js\"\r\nimport \"regenerator-runtime/runtime\"\r\n\r\ndotenv.config()\r\n\r\n// setInterval(() => {\r\n//   const [hour, minute] = new Date().toLocaleTimeString(\"fr-FR\").split(/:| /)\r\n//   const time = hour + \":\" + minute\r\n//   if (time == \"16:45\") {\r\n//   }\r\n// }, 60000)\r\n\r\nconst updateDatabase = async () => {\r\n  try {\r\n    const {\r\n      copyright,\r\n      date,\r\n      explanation,\r\n      hdurl,\r\n      media_type,\r\n      url,\r\n      service_version,\r\n      title,\r\n    } = await fetchNasa()\r\n    const URlS = [url, hdurl]\r\n\r\n    const uploadMultipleUrl = async (args) => {\r\n      let arr = []\r\n      try {\r\n        for (const url of args) {\r\n          const data = await uploadCloudinary(url)\r\n          const { secure_url } = data\r\n          arr.push(secure_url)\r\n        }\r\n      } catch (error) {\r\n        arr.push(args[1])\r\n      }\r\n      return arr\r\n    }\r\n\r\n    const arr = await uploadMultipleUrl(URlS)\r\n    const [Url, hdUrl] = arr\r\n\r\n    await insertDatabase({\r\n      title: title,\r\n      explanation: explanation,\r\n      media_type: media_type,\r\n      Url,\r\n      hdUrl,\r\n      service_version: service_version,\r\n      date: date,\r\n      copyright: copyright,\r\n    })\r\n    console.log(\"✔️ \" + \" Element added\")\r\n  } catch (error) {\r\n    console.error(\"❌ \", error.message)\r\n  }\r\n}\r\nupdateDatabase()\r\n"],"names":["$1yAiS$dotenv","config","path","$1yAiS$cloudinary","cloud_name","api_key","api_secret","$1d9071e28cb7341cf03d4bf9596d96ac$export$8d415394df4544a2","async","oldUrl","v2","uploader","upload","format","error","result","console","log","$3c0849c024b77fd4d1e91a9cef2b9b1e$var$supabase","$1yAiS$createClient","copyright","date","explanation","hdurl","media_type","url","service_version","title","res","$1yAiS$axios","get","data","$8309d4e8efda21a2e4b2695707e4ad1e$export$b7253410f3489f3e","URlS","uploadMultipleUrl","args","arr","url1","secure_url","push","Url","hdUrl","from","insert","media","$3c0849c024b77fd4d1e91a9cef2b9b1e$export$1a7e2208a8b22cc8","message","$935ad2353f642606d8c7acbe388acaad$var$updateDatabase"],"version":3,"file":"index.js.map"}